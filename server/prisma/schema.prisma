generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String?
  role        UserRole  @default(STUDENT)
  avatarUrl   String?
  profile     Profile?
  aiInsights  Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  sentRequests     SessionRequest[] @relation("StudentRequests")
  receivedRequests SessionRequest[] @relation("MentorRequests")
  sentMessages     ChatMessage[]    @relation("UserMessages")
  notifications    Notification[]   @relation("UserNotifications")
  progressEntries  ProgressEntry[]  @relation("UserProgress")
  scheduledSessions ScheduledSession[] @relation("UserScheduledSessions")
  mentorSessions   ScheduledSession[] @relation("MentorScheduledSessions")
}

model Profile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  bio         String?
  subjects    String
  rating      Float     @default(0)
  hourlyRate  Int?
  availability Json?
  successRate Float     @default(0)
  aiScore     Float     @default(0)
}

model SessionRequest {
  id          Int       @id @default(autoincrement())
  studentId   Int
  mentorId    Int
  subject     String
  message     String?
  urgencyScore Float    @default(0)
  aiAnalysis  Json?
  matchScore  Float?
  status      RequestStatus @default(PENDING)
  createdAt   DateTime  @default(now())

  student     User      @relation("StudentRequests", fields: [studentId], references: [id])
  mentor      User      @relation("MentorRequests", fields: [mentorId], references: [id])
  messages    ChatMessage[]
}

model ChatMessage {
  id          Int       @id @default(autoincrement())
  sessionId   Int?
  fromUserId  Int
  message     String
  isAiMessage Boolean   @default(false)
  aiTopics    String[]
  fileUrl     String?   // For file uploads
  fileName    String?   // Original filename
  fileSize    Int?      // File size in bytes
  fileType    String?   // MIME type
  createdAt   DateTime  @default(now())

  session     SessionRequest? @relation(fields: [sessionId], references: [id])
  fromUser    User      @relation("UserMessages", fields: [fromUserId], references: [id])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  type        NotificationType
  title       String
  message     String
  isRead      Boolean   @default(false)
  relatedId   Int?      // ID of related session, message, etc.
  relatedType String?   // Type of related item
  createdAt   DateTime  @default(now())

  user        User      @relation("UserNotifications", fields: [userId], references: [id])
}

model ProgressEntry {
  id          Int       @id @default(autoincrement())
  userId      Int
  subject     String
  score       Float
  maxScore    Float
  type        ProgressType
  description String?
  date        DateTime  @default(now())

  user        User      @relation("UserProgress", fields: [userId], references: [id])
}

model ScheduledSession {
  id          Int       @id @default(autoincrement())
  studentId   Int
  mentorId    Int
  title       String
  description String?
  subject     String
  startTime   DateTime
  endTime     DateTime
  status      SessionStatus @default(SCHEDULED)
  meetingType MeetingType @default(VIDEO)
  location    String?
  meetingLink String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  student     User      @relation("UserScheduledSessions", fields: [studentId], references: [id])
  mentor      User      @relation("MentorScheduledSessions", fields: [mentorId], references: [id])
}

enum UserRole { 
  STUDENT 
  MENTOR 
  ADMIN 
}

enum RequestStatus { 
  PENDING 
  ACCEPTED 
  REJECTED 
  CANCELLED 
  FINISHED 
}

enum NotificationType {
  MESSAGE
  SESSION
  RATING
  REMINDER
  SYSTEM
}

enum ProgressType {
  QUIZ
  ASSIGNMENT
  PROJECT
  SESSION
  MILESTONE
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MeetingType {
  VIDEO
  AUDIO
  IN_PERSON
}
